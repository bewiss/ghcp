import express from "express";
import dotenv from "dotenv";
import ExcelJS from "exceljs";
import { scrapeCoffeePage, extractCoffeeData } from "./coffeeextractor.js";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3033;

// Serve static landing page and assets
app.use(express.static("public"));
app.use(express.json());

// Health endpoint
app.get("/healthz", (req, res) => res.json({ ok: true }));

// API: Extract coffee info from a product URL
app.get("/api/extract", async (req, res) => {
  const url = (req.query.url || "https://thebarn.de/de/products/elida-gesha").toString();
  try {
    const rawText = await scrapeCoffeePage(url);
    if (!rawText) return res.status(502).json({ ok: false, error: "Scrape failed" });
    const data = await extractCoffeeData(rawText);
    return res.json({ ok: true, data });
  } catch (e) {
    console.error("/api/extract error:", e);
    return res.status(500).json({ ok: false, error: e?.message || "Unknown error" });
  }
});

// API: Export provided data to Excel and trigger download
app.post("/api/export", async (req, res) => {
  try {
    const { url, price, weight, flavor, processing, farmer } = req.body || {};
    const wb = new ExcelJS.Workbook();

    // Sheet 1: Readme_and_Consistency_Check
    const readme = wb.addWorksheet("Readme_and_Consistency_Check");
    readme.getCell("A1").value = "This file was generated by Coffee Extractor.";
    readme.getCell("A2").value = "Please verify data consistency against enums in 'Bean_Information'.";

    // Sheet 2: Beans (headers at A1)
    const beans = wb.addWorksheet("Beans");
    const beansHeaders = [
      "Name","Roaster","Roast date","Roast type","Degree of Roast","Custom degree of Roast","Blend","Weight","Cost","Flavour profile","Cupping points","Decaffeinated","Website","EAN / Articlenumber","Notes","Rating","Archived","Frozen Date","Unfrozen Date","Freezing Storage Type","Frozen Note","1. Country","1. Region","1. Farm","1. Farmer","1. Elevation","1. Variety","1. Processing","1. Harvested","1. Percentage","1. Bean certification","1. Fob Price","1. Purchasing Price"
    ];
  beans.getRow(1).values = beansHeaders;
    // Optionally map provided fields into a minimal data row (leave unspecified fields empty)
    const mappedRow = [
      "", // Name
      "", // Roaster
      "", // Roast date
      "", // Roast type
      "", // Degree of Roast
      "", // Custom degree of Roast
      "", // Blend
      weight || "", // Weight
      "", // Cost
      flavor || "", // Flavour profile
      "", // Cupping points
      (typeof req.body?.decaf !== 'undefined') ? String(req.body.decaf) : "", // Decaffeinated
      url || "", // Website
      "", // EAN / Articlenumber
      "", // Notes
      "", // Rating
      (typeof req.body?.archived !== 'undefined') ? String(req.body.archived) : "", // Archived
      "", // Frozen Date
      "", // Unfrozen Date
      req.body?.freezingStorageType || "", // Freezing Storage Type
      "", // Frozen Note
      "", // 1. Country
      "", // 1. Region
      "", // 1. Farm
      req.body?.farmer || farmer || "", // 1. Farmer
      "", // 1. Elevation
      "", // 1. Variety
      processing || "", // 1. Processing
      "", // 1. Harvested
      "", // 1. Percentage
      "", // 1. Bean certification
      "", // 1. Fob Price
      ""  // 1. Purchasing Price
    ];
  beans.getRow(2).values = mappedRow;

    // Sheet 3: Bean_Information (headers start at A3)
    const info = wb.addWorksheet("Bean_Information");
    const infoHeaders = [
      "BEAN_ROASTING_TYPE_ENUM","ROASTS_ENUM","BEAN_MIX_ENUM","DECAFFINATED","ARCHIVED","ROAST_DATE_GREATER","FREEZING_STORAGE_TYPE","FREEZING_DATE_GREATER","BUY_DATE"
    ];
  info.getRow(3).values = infoHeaders;

    const infoRows = [
      ["FILTER","UNKNOWN","UNKNOWN","TRUE","TRUE","1/1/2020","UNKNOWN","1/1/2020","1/1/2020"],
      ["ESPRESSO","CINNAMON_ROAST","SINGLE_ORIGIN","FALSE","FALSE","","COFFEE_BAG","",""],
      ["OMNI","AMERICAN_ROAST","BLEND","","","","COFFEE_JAR","",""] ,
      ["UNKOWN","NEW_ENGLAND_ROAST","","","","","ZIP_LOCK","",""] ,
      ["","HALF_CITY_ROAST","","","","","VACUUM_SEALED","",""] ,
      ["","MODERATE_LIGHT_ROAST","","","","","TUBE","",""] ,
      ["","CITY_ROAST","","","","","","",""] ,
      ["","CITY_PLUS_ROAST","","","","","","",""] ,
      ["","FULL_CITY_ROAST","","","","","","",""] ,
      ["","FULL_CITY_PLUS_ROAST","","","","","","",""] ,
      ["","ITALIAN_ROAST","","","","","","",""] ,
      ["","VIEANNA_ROAST","","","","","","",""] ,
      ["","FRENCH_ROAST","","","","","","",""] ,
      ["","CUSTOM_ROAST","","","","","","",""]
    ];
    for (let i = 0; i < infoRows.length; i++) {
      info.getRow(4 + i).values = infoRows[i];
    }

    const buf = await wb.xlsx.writeBuffer();
    res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    res.setHeader("Content-Disposition", `attachment; filename="coffee-data.xlsx"`);
    return res.status(200).send(buf);
  } catch (e) {
    console.error("/api/export error:", e);
    return res.status(500).json({ ok: false, error: e?.message || "Export failed" });
  }
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Web app listening on http://localhost:${PORT}`);
});
